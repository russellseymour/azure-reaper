name: 0.6$(Rev:.r)

# Define variables
variables:
  buildImage: ubuntu-20.04
  buildOutputDir: $(Build.SourcesDirectory)/output
  functionOutputDir: $(buildOutputDir)/function
  archiveFilename: azure-reaper-$(Build.BuildNumber).zip
  archiveSrcZipFilename: azure-reaper-src-$(Build.BuildNumber).zip
  archiveSrcTarFilename: azure-reaper-src-$(Build.BuildNumber).tar.gz
  releaseArtefactsDir: $(Build.SourcesDirectory)/build_artefacts

  # configure the URI to the zip file that needs to be used in the deployment
  # this will be patched in the built template file
  releaseZipUrl: $(Build.Repository.Uri)/releases/download/v$(Build.BuildNumber)/azure-reaper-$(Build.BuildNumber).zip

stages:

  - stage: build_reaper_function
    displayName: Build Azure Reaper

    jobs:

      - job: build
        displayName: Build
        pool:
          vmImage: $(buildImage)

        steps:

          # Install Report Generator tool
          - task: DotNetCoreCLI@2
            displayName: Install ReportGenerator Tool
            inputs:
              command: custom
              custom: tool
              arguments: install dotnet-reportgenerator-globaltool -g

          # Add the dotnet tools dir to the path
          - script: echo "##vso[task.prependpath]$HOME/.dotnet/tools"
            displayName: Add DotNet custom tools to the path

          # Run the tests
          - task: DotNetCoreCLI@2
            displayName: Execute Unit Tests
            inputs:
              command: test
              arguments: --logger "trx;LogFileName=testresults.trx" /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=TestResults/Coverage/
              projects: '$(Build.SourcesDirectory)/tests/*.csproj'

          # Generate a report for the code coverga
          - task: DotNetCoreCLI@2
            displayName: Generate Coverage Report
            inputs:
              command: custom
              custom: reportgenerator 
              arguments: -reports:TestResults/Coverage/coverage.cobertura.xml -targetDir:TestResults/Coverage/Reports -tag:$(Build.BuildNumber) -reportTypes:inlinehtml 

          # Publish test and code coverage results
          - task: PublishTestResults@2
            inputs:
              testRunner: VSTest
              testResultsFiles: '**/TestResults/*.trx'
              failTaskOnFailedTests: true

          - task: PublishCodeCoverageResults@1
            inputs:
              codeCoverageTool: 'cobertura'
              summaryFileLocation: $(Build.SourcesDirectory)/tests/TestResults/Coverage/**/coverage.cobertura.xml
              reportDirectory: $(Build.SourcesDirectory)/tests/TestResults/Coverage/Reports
              failIfCoverageEmpty: false 

          # Compile the function and output to a directory
          - task: DotNetCoreCLI@2
            displayName: Compile function
            inputs:
              projects: '$(Build.SourcesDirectory)/function/*.csproj'
              arguments: '--output $(functionOutputDir) --configuration Release'
              # workingDirectory: $(Build.SourcesDirectory)/function

          # Package the src code
          # - Zip file
          - task: ArchiveFiles@2
            displayName: Package source code - zip
            inputs:
              rootFolderOrFile: $(Build.SourcesDirectory)/function
              includeRootFolder: false
              archiveFile: $(Build.ArtifactStagingDirectory)/$(archiveSrcZipFilename)

          # - Tar file
          - task: ArchiveFiles@2
            displayName: Package source code - tar
            inputs:
              rootFolderOrFile: $(Build.SourcesDirectory)/function
              includeRootFolder: false
              archiveType: tar
              archiveFile: $(Build.ArtifactStagingDirectory)/$(archiveSrcTarFilename)

          # Package the compiled function into a zip file
          - task: ArchiveFiles@2
            displayName: Package function
            inputs:
              rootFolderOrFile: $(functionOutputDir)
              includeRootFolder: false
              archiveFile: $(Build.ArtifactStagingDirectory)/$(archiveFileName)

          # Install Bicep
          - task: BicepInstall@0
            displayName: Install Bicep
            inputs:
              version: 0.3.255

          # Build the bicep file into an ARM template
          - task: BicepBuild@0
            displayName: Build Bicep template
            inputs:
              process: single
              sourceFile: $(Build.SourcesDirectory)/infrastructure/azuredeploy.bicep
              stdout: false
              outputDirectory: $(Build.ArtifactStagingDirectory)

          # Patch the JSON template file with the releaseZipUrl
          - task: geeklearningio.gl-vsts-tasks-file-patch.json-patch-task.JsonPatch@4
            displayName: 'Patch ARM template with release zip file URL'
            inputs:
              JsonWorkingDir: $(Build.ArtifactStagingDirectory)
              JsonTargetFilters: azuredeploy.json
              JsonPatchContent: '+ /parameters/packageUri/defaultValue => "$(releaseZipUrl)"'

          # Publish the artefact
          - task: PublishPipelineArtifact@1
            displayName: Publish zip files and ARM template
            inputs:
              targetPath: $(Build.ArtifactStagingDirectory)
              artifactName: drop

  - stage: release_build_artefacts
    displayName: Create GitHub release
    dependsOn: build_reaper_function

    jobs:
      
      - job: release
        displayName: Uplaod Artefacts
        pool:
          vmImage: $(buildImage)

        steps:

          - task: DownloadPipelineArtifact@2
            displayName: Download Build Artefacts
            inputs:
              artifact: drop
              path: $(releaseArtefactsDir)

          - task: GitHubRelease@1
            displayName: Create Release in GitHub
            inputs:
              gitHubConnection: russellseymour_github
              repositoryName: $(Build.Repository.Name)
              action: create
              assets: $(releaseArtefactsDir)/*
              tagSource: userSpecifiedTag
              tag: v$(Build.BuildNumber)
              title: v$(Build.BuildNumber)


    